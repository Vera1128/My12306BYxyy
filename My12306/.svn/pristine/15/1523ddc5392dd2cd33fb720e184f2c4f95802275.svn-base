package com.neuedu.my12306.usermgr.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.neuedu.my12306.common.DBUtils;
import com.neuedu.my12306.usermgr.domain.CertType;
import com.neuedu.my12306.usermgr.domain.City;
import com.neuedu.my12306.usermgr.domain.Order;
import com.neuedu.my12306.usermgr.domain.Province;
import com.neuedu.my12306.usermgr.domain.User;
import com.neuedu.my12306.usermgr.domain.UserType;

public class OrderDaoImpl implements OrderDao {
	private Connection conn;

	public OrderDaoImpl(Connection conn) {
		this.conn = conn;
	}

	@Override
	public List<Order> getOrderList(int pageSize, int pageNum, Order o)
			throws Exception {

		List<Order> list = new ArrayList<Order>();
		Order one = null;
		StringBuffer str = new StringBuffer();
		str.append("select * ");
		str.append("from tab_order ");
		// str.append("where c.id = u.city AND ct.id = u.cert_type AND "
		// + "u.user_type = ut.id AND c.father = p.provinceid ");

//		if (o.getId() != 0) {
//			str.append(" AND id=" + o.getId());
//		}
//		if (o.getName() != null && !o.getName().isEmpty()) {
//			str.append(" AND name='" + o.getName() + "'");
//		}
//		if (o.getOrder_date() != null && !o.getOrder_date().isEmpty()) {
//			str.append(" AND order_date='" + o.getOrder_date() + "'");
//		}
//		if (o.getFromplace() != null && !o.getFromplace().isEmpty()) {
//			str.append(" AND fromplace='" + o.getFromplace() + "'");
//		}
//		if (o.getToplace() != null && !o.getToplace().isEmpty()) {
//			str.append(" AND toplace='" + o.getToplace() + "'");
//		}
//		if (o.getBegin() != null && !o.getBegin().isEmpty()) {
//			str.append(" AND begin='" + o.getBegin() + "'");
//		}

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(str.toString());
			rs = pstmt.executeQuery();
			while (rs.next()) {
				one = new Order();
				one.setId(rs.getInt("id"));
				one.setName(rs.getString("name"));
				one.setOrder_date(rs.getString("order_date"));
				one.setFromplace(rs.getString("fromplace"));
				one.setToplace(rs.getString("toplace"));
				one.setBegin(rs.getString("begin"));
				list.add(one);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeStatement(pstmt, rs);

		}
		return list;
	}

	@Override
	public int save(Order o) throws Exception {
		int i = 0, idx = 1;
		String insert_sql = "insert into tab_order(order_date,name,fromplace,"
				+ "toplace,begin) " + "values(?,?,?,?,?)";
		// String insert_sql = "insert into tab_user(username,password) " +
		// "values(?,?)";
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(insert_sql);
			pstmt.setString(idx++, o.getOrder_date());
			pstmt.setString(idx++, o.getName());
			pstmt.setString(idx++, o.getFromplace());
			pstmt.setString(idx++, o.getToplace());
			pstmt.setString(idx++, o.getBegin());
			i = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeStatement(pstmt, null);
		}
		return i;
	}

	@Override
	public Order findOrder(Order o) throws Exception {
		Order one = null;
		boolean tag = false;

		StringBuffer str = new StringBuffer();
		str.append("select * ");
		str.append("from tab_order ");
		str.append("where ");

		if (o.getId() != 0) {
			str.append(" AND id=" + o.getId());
			tag = true;
		}
		if (o.getName() != null && !o.getName().isEmpty()) {
			str.append(" name='" + o.getName() + "'");
			tag = true;
		}
		if (o.getOrder_date() != null && !o.getOrder_date().isEmpty()) {
			str.append(" AND order_date='" + o.getOrder_date() + "'");
			tag = true;
		}
		if (o.getFromplace() != null && !o.getFromplace().isEmpty()) {
			str.append(" AND fromplace='" + o.getFromplace() + "'");
			tag = true;
		}
		if (o.getToplace() != null && !o.getToplace().isEmpty()) {
			str.append(" AND toplace='" + o.getToplace() + "'");
			tag = true;
		}
		if (o.getBegin() != null && !o.getBegin().isEmpty()) {
			str.append(" AND begin='" + o.getBegin() + "'");
			tag = true;
		}
		// 若没有查询条件则返回对象为null
		if (!tag) {
			return null;
		}

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(str.toString());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				one = new Order();
				one.setId(rs.getInt("id"));
				one.setName(rs.getString("name"));
				one.setOrder_date(rs.getString("order_date"));
				one.setFromplace(rs.getString("fromplace"));
				one.setToplace(rs.getString("toplace"));
				one.setBegin(rs.getString("begin"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeStatement(pstmt, rs);
		}
		return one;
	}

	@Override
	public boolean deleteOrder(int[] orderIdList) throws Exception {
		int i = 0;
		String param = Arrays.toString(orderIdList).replace("[", "(")
				.replace("]", ")");
		String insert_sql = "delete from tab_order where id in " + param;
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(insert_sql);
			i = pstmt.executeUpdate();
		} finally {
			DBUtils.closeStatement(pstmt, null);
		}
		return i != 0 ? true : false;
	}

	@Override
	public boolean updateOrder(Order o) throws Exception {
		int i = 0;
		boolean tag = false;
		StringBuffer str = new StringBuffer("update tab_order set ");

		// if (o.getId() != 0) {
		// str.append(" id=" + o.getId());
		// tag = true;
		// }
		if (o.getName() != null && !o.getName().isEmpty()) {
			str.append(" name='" + o.getName() + "'");
			tag = true;
		}
		if (o.getOrder_date() != null && !o.getOrder_date().isEmpty()) {
			str.append(", order_date='" + o.getOrder_date() + "'");
			tag = true;
		}
		if (o.getFromplace() != null && !o.getFromplace().isEmpty()) {
			str.append(", fromplace='" + o.getFromplace() + "'");
			tag = true;
		}
		if (o.getToplace() != null && !o.getToplace().isEmpty()) {
			str.append(", toplace='" + o.getToplace() + "'");
			tag = true;
		}
		if (o.getBegin() != null && !o.getBegin().isEmpty()) {
			str.append(", begin='" + o.getBegin() + "'");
			tag = true;
		}
		// 若没有查询条件则返回对象为null
		if (!tag) {
			return false;
		}
		str.append(" where id = " + o.getId());
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(str.toString());
			i = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeStatement(pstmt, null);
		}
		return i != 0 ? true : false;
	}
}